
 /**
  * This template file was generated by dynaTrace client.
  * The dynaTrace community portal can be found here: http://community.dynatrace.com/
  * For information how to publish a plugin please visit http://community.dynatrace.com/plugins/contribute/
  **/ 

package com.dynatrace.diagnostics.jira;

import com.dynatrace.diagnostics.pdk.*;
import com.dynatrace.diagnostics.sdk.resources.BaseConstants;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;


public class CreateIssueActionPlugin implements Action {
	private static final Logger log = Logger.getLogger(CreateIssueActionPlugin.class.getName());
	
	@Override
	public Status setup(ActionEnvironment env) throws Exception {
		return new Status(Status.StatusCode.Success);
	}
	
	@Override
	//Initialize fields 
	public Status execute(ActionEnvironment env) throws Exception {
		log.info("----------------------Executing JIRA - Create Issue Action Plugin-----------------------------");

		String data = env.getConfigString("jira_properties");
		String jiraUrl = env.getConfigString("jira_url");
		String jiraUsername = env.getConfigString("jira_username");
		String jiraPassword = env.getConfigPassword("jira_password");
		String jiraProjectId = env.getConfigString("jira_projectId");
		String jiraIssueTypeId = env.getConfigString("jira_issueTypeId");
		String jiraComponentId = env.getConfigString("jira_componentId");
		String jiraPriorityId = env.getConfigString("jira_priorityId");
		String jiraReporter = env.getConfigString("jira_reporter"); 
		String jiraAssignee = env.getConfigString("jira_assignee");  
		String jiraVersion = env.getConfigString("jira_version");
        String jiraProjectName = env.getConfigString("jira_projectName");  
        String jiraLabel = env.getConfigString("jira_label");
        String jiraDueDate = env.getConfigString("jira_dueDate");
        
        log.info("Parameters are: data= " + data + ", jiraURL= " + jiraUrl + ", jiraUsername= " + jiraUsername + ", jiraPassword= *******, jiraProjectId= " + jiraProjectId + 
        		", jiraIssueTypeId= " + jiraIssueTypeId + ", jiraComponentId= " + jiraComponentId + ", jiraPriorityId= " + jiraPriorityId + ", jiraReporter= " + jiraReporter +
        		", jiraAssignee= " + jiraAssignee + ", jiraVersion= " + jiraVersion + ", jiraProjectName= " + jiraProjectName + ", jiraLabel =" + jiraLabel + ", jiraDueDate =" + jiraDueDate);
       
		
		
		if (jiraUrl==null || jiraUsername==null || jiraPassword==null || jiraProjectId==null || 
				jiraIssueTypeId==null || jiraReporter==null || jiraUrl.isEmpty() || 
				jiraUsername.isEmpty() || jiraPassword.isEmpty() || jiraProjectId.isEmpty() || 
				jiraIssueTypeId.isEmpty() || jiraReporter.isEmpty()) {
			log.severe("Message=\"Required parameters to create issue in JIRA not present\"");
			// For easier testing the plugin will continue even without all its required parameters
			// return new Status(Status.StatusCode.ErrorInternalConfigurationProblem);
		}

		// Make sure URL always ends with the /
		if (!jiraUrl.endsWith("/")) {
			jiraUrl+="/";
		}
		
		log.info("number_of_incidents= "+env.getIncidents().size());
		
		for (Incident i : env.getIncidents()) {
			final StringBuilder desc = new StringBuilder();
			appendln(desc, "Description:           ", i.getIncidentRule().getDescription());
		    appendln(desc, "\\nSeverity:           ", getSeverityAsString(i));
		    appendln(desc, "\\nStart Time:         ", i.getStartTime().toString());
		    appendln(desc, "\\nEnd Time:           ", i.getEndTime().toString());
		    appendln(desc, "\\nDuration:           ", i.getDuration().toString());
		    appendln(desc, "\\nStatus:             ", i.isClosed() ? "Closed" : "Open");
		    appendln(desc, "\\nServer:             ", i.getServerName());
		    appendln(desc, "\\nIncident Name:      ", i.getIncidentRule().getName());
		    appendln(desc, "\\nIncident Condition: " + i.getIncidentRule().getCondition());	
		    
		    if (!i.getViolations().isEmpty()) {
			    appendln(desc, "\\n\\nViolations:");
			    for (Violation v : i.getViolations()) {
			        appendln(desc, "\\nMeasure:                 ", v.getViolatedMeasure().getName());	      
			        appendln(desc, "\\nAffected Server:         ", v.getViolatedMeasure().getSource().toString());
			        appendln(desc, "\\nUpper Severe Threshold:  ", v.getViolatedMeasure().getUpperSevere().getValue().toString());
			        appendln(desc, "\\nUpper Warning Threshold: ", v.getViolatedMeasure().getUpperWarning().getValue().toString());
			        appendln(desc, "\\nLower Warning Threshold: ", v.getViolatedMeasure().getLowerWarning().getValue().toString());
			        appendln(desc, "\\nLower Severe Threshold:  ", v.getViolatedMeasure().getLowerSevere().getValue().toString());			        
			        appendTriggerValues(v, desc);
			    }
			appendln(desc, "\\n\\n");	
			}
			
			//log.info("Description: "+desc.toString());
			String summary = i.getIncidentRule().getName();

			if (jiraUrl!=null && !jiraUrl.isEmpty()) {
				try {
					return createJiraIssue(data, jiraUrl, jiraUsername, jiraPassword, jiraProjectId,
							jiraIssueTypeId, jiraComponentId, jiraPriorityId, jiraVersion, jiraReporter,
							jiraAssignee,summary,desc.toString(), jiraLabel, jiraDueDate);
				}
				catch (IOException e) { 
					log.severe("Exception while raising issue in JIRA: Exception="+e);
					return new Status(Status.StatusCode.ErrorInfrastructure);
				}
			}
		}
		return new Status(Status.StatusCode.Success);
	}
	@Override
	public void teardown(ActionEnvironment env) throws Exception {
	}
	
	private Status createJiraIssue(String data, String jiraUrl, String jiraUsername, String jiraPassword, String jiraProjectId, 
			String jiraIssueTypeId, String jiraComponentId, String jiraPriorityId, String jiraVersion, 
			String jiraReporter, String jiraAssignee, String summary, String description, String jiraLabel, String jiraDueDate) throws IOException {
		
		
		// Assemble JIRA URL
		jiraUrl = jiraUrl + "rest/api/2/issue/";		
		log.info("URL=" + jiraUrl);
		
		PropertiesWriter aProp = new PropertiesWriter(summary, description, data, jiraProjectId, jiraIssueTypeId, jiraLabel, jiraDueDate, jiraReporter, jiraAssignee); //use constructors
		JIRACurl aCurl = new JIRACurl(data, jiraUsername, jiraPassword, jiraUrl);
		 
		//create the json-data for the curl
		aProp.writeProperties();
		//start the curl via Rest-API
		aCurl.createTicket();		

	return new Status(Status.StatusCode.Success);
	}
	
	private String getSeverityAsString(Incident incident) {
		if(incident.getSeverity() != null) {
	    	switch(incident.getSeverity()) {
		    	case Error: return "Severe";
		    	case Informational: return "Informational";
		    	case Warning: return "Warning";
	    	}
		}
		return "";
	}
	
	private void appendln(StringBuilder buf, String... strings) {
	    for (String string : strings) {
	        buf.append(string);
	    }
	    buf.append("\n");
	}
		
	private void append(StringBuilder buf, String... strings) {
	    for (String string : strings) {
	        buf.append(string);
	    }
	}
		
	private void appendTriggerValues(Violation violation, StringBuilder sb) {
	    Collection<Violation.TriggerValue> triggerValues = violation.getTriggerValues();
	
	    if (!triggerValues.isEmpty()) {
	        for (Violation.TriggerValue triggerValue : triggerValues) {
	        	append(sb,"  \\n",triggerValue.getSource().toString(),": ",triggerValue.getValue().toString());
	            double v = triggerValue.getValue().getValue();
	            double t = violation.getViolatedThreshold().getValue().getValue();
	            double dif = Math.abs(v - t);
	            if (dif != 0) {
	            	append(sb," (",BaseConstants.FORMAT_INTERNAL_DECIMAL.format(dif),violation.getViolatedMeasure().getUnit());
	    		    append(sb, v < t ? " Under Threshold" : " Over Threshold",")");
	            }
	        }
	    }
	}		
	
	private static final String TD_NOWRAP_A_ID_VERSION = "<td nowrap><a id=\"version_";		
	
}

	
		
		
		
